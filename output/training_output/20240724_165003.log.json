{"env_info": "sys.platform: linux\nPython: 3.8.19 (default, Mar 20 2024, 19:58:24) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3060 Ti\nCUDA_HOME: /home/claudane/anaconda3/envs/genad3\nNVCC: Build cuda_11.3.r11.3/compiler.29745058_0\nGCC: gcc (conda-forge gcc 9.5.0-17) 9.5.0\nPyTorch: 1.9.1+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.10.1+cu111\nOpenCV: 4.10.0\nMMCV: 1.4.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMDetection: 2.14.0\nMMSegmentation: 0.14.1\nMMDetection3D: 0.17.1+4000d2c", "config": "point_cloud_range = [-15.0, -30.0, -2.0, 15.0, 30.0, 2.0]\nclass_names = [\n    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n]\ndataset_type = 'GenADCustomNuScenesDataset'\ndata_root = '/home/claudane/Desktop/GenAD/GenAD/data/nuscenes/'\ninput_modality = dict(\n    use_lidar=False,\n    use_camera=True,\n    use_radar=False,\n    use_map=False,\n    use_external=True)\nfile_client_args = dict(backend='disk')\ntrain_pipeline = [\n    dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n    dict(type='PhotoMetricDistortionMultiViewImage'),\n    dict(\n        type='LoadAnnotations3D',\n        with_bbox_3d=True,\n        with_label_3d=True,\n        with_attr_label=True),\n    dict(\n        type='CustomObjectRangeFilter',\n        point_cloud_range=[-15.0, -30.0, -2.0, 15.0, 30.0, 2.0]),\n    dict(\n        type='CustomObjectNameFilter',\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(\n        type='NormalizeMultiviewImage',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='RandomScaleImageMultiViewImage', scales=[0.4]),\n    dict(type='PadMultiViewImage', size_divisor=32),\n    dict(\n        type='CustomDefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        with_ego=True),\n    dict(\n        type='CustomCollect3D',\n        keys=[\n            'gt_bboxes_3d', 'gt_labels_3d', 'img', 'ego_his_trajs',\n            'ego_fut_trajs', 'ego_fut_masks', 'ego_fut_cmd', 'ego_lcf_feat',\n            'gt_attr_labels'\n        ])\n]\ntest_pipeline = [\n    dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadAnnotations3D',\n        with_bbox_3d=True,\n        with_label_3d=True,\n        with_attr_label=True),\n    dict(\n        type='CustomObjectRangeFilter',\n        point_cloud_range=[-15.0, -30.0, -2.0, 15.0, 30.0, 2.0]),\n    dict(\n        type='CustomObjectNameFilter',\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(\n        type='NormalizeMultiviewImage',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(\n        type='MultiScaleFlipAug3D',\n        img_scale=(1600, 900),\n        pts_scale_ratio=1,\n        flip=False,\n        transforms=[\n            dict(type='RandomScaleImageMultiViewImage', scales=[0.4]),\n            dict(type='PadMultiViewImage', size_divisor=32),\n            dict(\n                type='CustomDefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ],\n                with_label=False,\n                with_ego=True),\n            dict(\n                type='CustomCollect3D',\n                keys=[\n                    'points', 'gt_bboxes_3d', 'gt_labels_3d', 'img',\n                    'fut_valid_flag', 'ego_his_trajs', 'ego_fut_trajs',\n                    'ego_fut_masks', 'ego_fut_cmd', 'ego_lcf_feat',\n                    'gt_attr_labels'\n                ])\n        ])\n]\neval_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=10,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'\n        ],\n        with_label=False),\n    dict(type='Collect3D', keys=['points'])\n]\ndata = dict(\n    samples_per_gpu=1,\n    workers_per_gpu=4,\n    train=dict(\n        type='GenADCustomNuScenesDataset',\n        data_root='/home/claudane/Desktop/GenAD/GenAD/data/nuscenes/',\n        ann_file=\n        '/home/claudane/Desktop/GenAD/GenAD/data/nuscenes/genad_nuscenes_train.pkl',\n        pipeline=[\n            dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n            dict(type='PhotoMetricDistortionMultiViewImage'),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True,\n                with_attr_label=True),\n            dict(\n                type='CustomObjectRangeFilter',\n                point_cloud_range=[-15.0, -30.0, -2.0, 15.0, 30.0, 2.0]),\n            dict(\n                type='CustomObjectNameFilter',\n                classes=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ]),\n            dict(\n                type='NormalizeMultiviewImage',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='RandomScaleImageMultiViewImage', scales=[0.4]),\n            dict(type='PadMultiViewImage', size_divisor=32),\n            dict(\n                type='CustomDefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ],\n                with_ego=True),\n            dict(\n                type='CustomCollect3D',\n                keys=[\n                    'gt_bboxes_3d', 'gt_labels_3d', 'img', 'ego_his_trajs',\n                    'ego_fut_trajs', 'ego_fut_masks', 'ego_fut_cmd',\n                    'ego_lcf_feat', 'gt_attr_labels'\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=False,\n            use_camera=True,\n            use_radar=False,\n            use_map=False,\n            use_external=True),\n        test_mode=False,\n        box_type_3d='LiDAR',\n        use_valid_flag=True,\n        bev_size=(100, 100),\n        pc_range=[-15.0, -30.0, -2.0, 15.0, 30.0, 2.0],\n        queue_length=3,\n        map_classes=['divider', 'ped_crossing', 'boundary'],\n        map_fixed_ptsnum_per_line=20,\n        map_eval_use_same_gt_sample_num_flag=True,\n        custom_eval_version='genad_nusc_detection_cvpr_2019'),\n    val=dict(\n        type='GenADCustomNuScenesDataset',\n        ann_file=\n        '/home/claudane/Desktop/GenAD/GenAD/data/nuscenes/genad_nuscenes_val.pkl',\n        pipeline=[\n            dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True,\n                with_attr_label=True),\n            dict(\n                type='CustomObjectRangeFilter',\n                point_cloud_range=[-15.0, -30.0, -2.0, 15.0, 30.0, 2.0]),\n            dict(\n                type='CustomObjectNameFilter',\n                classes=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ]),\n            dict(\n                type='NormalizeMultiviewImage',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1600, 900),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(type='RandomScaleImageMultiViewImage', scales=[0.4]),\n                    dict(type='PadMultiViewImage', size_divisor=32),\n                    dict(\n                        type='CustomDefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False,\n                        with_ego=True),\n                    dict(\n                        type='CustomCollect3D',\n                        keys=[\n                            'points', 'gt_bboxes_3d', 'gt_labels_3d', 'img',\n                            'fut_valid_flag', 'ego_his_trajs', 'ego_fut_trajs',\n                            'ego_fut_masks', 'ego_fut_cmd', 'ego_lcf_feat',\n                            'gt_attr_labels'\n                        ])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=False,\n            use_camera=True,\n            use_radar=False,\n            use_map=False,\n            use_external=True),\n        test_mode=True,\n        box_type_3d='LiDAR',\n        data_root='/home/claudane/Desktop/GenAD/GenAD/data/nuscenes/',\n        pc_range=[-15.0, -30.0, -2.0, 15.0, 30.0, 2.0],\n        bev_size=(100, 100),\n        samples_per_gpu=1,\n        map_classes=['divider', 'ped_crossing', 'boundary'],\n        map_ann_file=\n        '/home/claudane/Desktop/GenAD/GenAD/data/nuscenes/nuscenes_map_anns_val.json',\n        map_fixed_ptsnum_per_line=20,\n        map_eval_use_same_gt_sample_num_flag=True,\n        use_pkl_result=True,\n        custom_eval_version='genad_nusc_detection_cvpr_2019'),\n    test=dict(\n        type='GenADCustomNuScenesDataset',\n        data_root='/home/claudane/Desktop/GenAD/GenAD/data/nuscenes/',\n        ann_file=\n        '/home/claudane/Desktop/GenAD/GenAD/data/nuscenes/genad_nuscenes_val.pkl',\n        pipeline=[\n            dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True,\n                with_attr_label=True),\n            dict(\n                type='CustomObjectRangeFilter',\n                point_cloud_range=[-15.0, -30.0, -2.0, 15.0, 30.0, 2.0]),\n            dict(\n                type='CustomObjectNameFilter',\n                classes=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ]),\n            dict(\n                type='NormalizeMultiviewImage',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1600, 900),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(type='RandomScaleImageMultiViewImage', scales=[0.4]),\n                    dict(type='PadMultiViewImage', size_divisor=32),\n                    dict(\n                        type='CustomDefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False,\n                        with_ego=True),\n                    dict(\n                        type='CustomCollect3D',\n                        keys=[\n                            'points', 'gt_bboxes_3d', 'gt_labels_3d', 'img',\n                            'fut_valid_flag', 'ego_his_trajs', 'ego_fut_trajs',\n                            'ego_fut_masks', 'ego_fut_cmd', 'ego_lcf_feat',\n                            'gt_attr_labels'\n                        ])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=False,\n            use_camera=True,\n            use_radar=False,\n            use_map=False,\n            use_external=True),\n        test_mode=True,\n        box_type_3d='LiDAR',\n        pc_range=[-15.0, -30.0, -2.0, 15.0, 30.0, 2.0],\n        bev_size=(100, 100),\n        samples_per_gpu=1,\n        map_classes=['divider', 'ped_crossing', 'boundary'],\n        map_ann_file=\n        '/home/claudane/Desktop/GenAD/GenAD/data/nuscenes/nuscenes_map_anns_val.json',\n        map_fixed_ptsnum_per_line=20,\n        map_eval_use_same_gt_sample_num_flag=True,\n        use_pkl_result=True,\n        custom_eval_version='genad_nusc_detection_cvpr_2019'),\n    shuffler_sampler=dict(type='DistributedGroupSampler'),\n    nonshuffler_sampler=dict(type='DistributedSampler'))\nevaluation = dict(\n    interval=60,\n    pipeline=[\n        dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n        dict(\n            type='LoadPointsFromFile',\n            coord_type='LIDAR',\n            load_dim=5,\n            use_dim=5,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='LoadAnnotations3D',\n            with_bbox_3d=True,\n            with_label_3d=True,\n            with_attr_label=True),\n        dict(\n            type='CustomObjectRangeFilter',\n            point_cloud_range=[-15.0, -30.0, -2.0, 15.0, 30.0, 2.0]),\n        dict(\n            type='CustomObjectNameFilter',\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ]),\n        dict(\n            type='NormalizeMultiviewImage',\n            mean=[123.675, 116.28, 103.53],\n            std=[58.395, 57.12, 57.375],\n            to_rgb=True),\n        dict(\n            type='MultiScaleFlipAug3D',\n            img_scale=(1600, 900),\n            pts_scale_ratio=1,\n            flip=False,\n            transforms=[\n                dict(type='RandomScaleImageMultiViewImage', scales=[0.4]),\n                dict(type='PadMultiViewImage', size_divisor=32),\n                dict(\n                    type='CustomDefaultFormatBundle3D',\n                    class_names=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ],\n                    with_label=False,\n                    with_ego=True),\n                dict(\n                    type='CustomCollect3D',\n                    keys=[\n                        'points', 'gt_bboxes_3d', 'gt_labels_3d', 'img',\n                        'fut_valid_flag', 'ego_his_trajs', 'ego_fut_trajs',\n                        'ego_fut_masks', 'ego_fut_cmd', 'ego_lcf_feat',\n                        'gt_attr_labels'\n                    ])\n            ])\n    ],\n    metric='bbox',\n    map_metric='chamfer')\ncheckpoint_config = dict(interval=1, max_keep_ckpts=60)\nlog_config = dict(\n    interval=100,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nwork_dir = 'output/training_output'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nplugin = True\nplugin_dir = 'projects/mmdet3d_plugin/'\nvoxel_size = [0.15, 0.15, 4]\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\nnum_classes = 10\nmap_classes = ['divider', 'ped_crossing', 'boundary']\nmap_num_vec = 100\nmap_fixed_ptsnum_per_gt_line = 20\nmap_fixed_ptsnum_per_pred_line = 20\nmap_eval_use_same_gt_sample_num_flag = True\nmap_num_classes = 3\n_dim_ = 256\n_pos_dim_ = 128\n_ffn_dim_ = 512\n_num_levels_ = 1\nbev_h_ = 100\nbev_w_ = 100\nqueue_length = 3\ntotal_epochs = 60\nmodel = dict(\n    type='GenAD',\n    use_grid_mask=True,\n    video_test_mode=True,\n    pretrained=dict(img='torchvision://resnet50'),\n    img_backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(3, ),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='pytorch'),\n    img_neck=dict(\n        type='FPN',\n        in_channels=[2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_output',\n        num_outs=1,\n        relu_before_extra_convs=True),\n    pts_bbox_head=dict(\n        type='GenADHead',\n        map_thresh=0.5,\n        dis_thresh=0.2,\n        pe_normalization=True,\n        tot_epoch=60,\n        use_traj_lr_warmup=False,\n        query_thresh=0.0,\n        query_use_fix_pad=False,\n        ego_his_encoder=None,\n        ego_lcf_feat_idx=None,\n        valid_fut_ts=6,\n        agent_dim=300,\n        ego_agent_decoder=dict(\n            type='CustomTransformerDecoder',\n            num_layers=1,\n            return_intermediate=False,\n            transformerlayers=dict(\n                type='BaseTransformerLayer',\n                attn_cfgs=[\n                    dict(\n                        type='MultiheadAttention',\n                        embed_dims=256,\n                        num_heads=8,\n                        dropout=0.1)\n                ],\n                feedforward_channels=512,\n                ffn_dropout=0.1,\n                operation_order=('cross_attn', 'norm', 'ffn', 'norm'))),\n        ego_map_decoder=dict(\n            type='CustomTransformerDecoder',\n            num_layers=1,\n            return_intermediate=False,\n            transformerlayers=dict(\n                type='BaseTransformerLayer',\n                attn_cfgs=[\n                    dict(\n                        type='MultiheadAttention',\n                        embed_dims=256,\n                        num_heads=8,\n                        dropout=0.1)\n                ],\n                feedforward_channels=512,\n                ffn_dropout=0.1,\n                operation_order=('cross_attn', 'norm', 'ffn', 'norm'))),\n        motion_decoder=dict(\n            type='CustomTransformerDecoder',\n            num_layers=1,\n            return_intermediate=False,\n            transformerlayers=dict(\n                type='BaseTransformerLayer',\n                attn_cfgs=[\n                    dict(\n                        type='MultiheadAttention',\n                        embed_dims=256,\n                        num_heads=8,\n                        dropout=0.1)\n                ],\n                feedforward_channels=512,\n                ffn_dropout=0.1,\n                operation_order=('cross_attn', 'norm', 'ffn', 'norm'))),\n        motion_map_decoder=dict(\n            type='CustomTransformerDecoder',\n            num_layers=1,\n            return_intermediate=False,\n            transformerlayers=dict(\n                type='BaseTransformerLayer',\n                attn_cfgs=[\n                    dict(\n                        type='MultiheadAttention',\n                        embed_dims=256,\n                        num_heads=8,\n                        dropout=0.1)\n                ],\n                feedforward_channels=512,\n                ffn_dropout=0.1,\n                operation_order=('cross_attn', 'norm', 'ffn', 'norm'))),\n        use_pe=True,\n        bev_h=100,\n        bev_w=100,\n        num_query=300,\n        num_classes=10,\n        in_channels=256,\n        sync_cls_avg_factor=True,\n        with_box_refine=True,\n        as_two_stage=False,\n        map_num_vec=100,\n        map_num_classes=3,\n        map_num_pts_per_vec=20,\n        map_num_pts_per_gt_vec=20,\n        map_query_embed_type='instance_pts',\n        map_transform_method='minmax',\n        map_gt_shift_pts_pattern='v2',\n        map_dir_interval=1,\n        map_code_size=2,\n        map_code_weights=[1.0, 1.0, 1.0, 1.0],\n        transformer=dict(\n            type='GenADPerceptionTransformer',\n            map_num_vec=100,\n            map_num_pts_per_vec=20,\n            rotate_prev_bev=True,\n            use_shift=True,\n            use_can_bus=True,\n            embed_dims=256,\n            encoder=dict(\n                type='BEVFormerEncoder',\n                num_layers=3,\n                pc_range=[-15.0, -30.0, -2.0, 15.0, 30.0, 2.0],\n                num_points_in_pillar=4,\n                return_intermediate=False,\n                transformerlayers=dict(\n                    type='BEVFormerLayer',\n                    attn_cfgs=[\n                        dict(\n                            type='TemporalSelfAttention',\n                            embed_dims=256,\n                            num_levels=1),\n                        dict(\n                            type='SpatialCrossAttention',\n                            pc_range=[-15.0, -30.0, -2.0, 15.0, 30.0, 2.0],\n                            deformable_attention=dict(\n                                type='MSDeformableAttention3D',\n                                embed_dims=256,\n                                num_points=8,\n                                num_levels=1),\n                            embed_dims=256)\n                    ],\n                    feedforward_channels=512,\n                    ffn_dropout=0.1,\n                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',\n                                     'ffn', 'norm'))),\n            decoder=dict(\n                type='DetectionTransformerDecoder',\n                num_layers=3,\n                return_intermediate=True,\n                transformerlayers=dict(\n                    type='DetrTransformerDecoderLayer',\n                    attn_cfgs=[\n                        dict(\n                            type='MultiheadAttention',\n                            embed_dims=256,\n                            num_heads=8,\n                            dropout=0.1),\n                        dict(\n                            type='CustomMSDeformableAttention',\n                            embed_dims=256,\n                            num_levels=1)\n                    ],\n                    feedforward_channels=512,\n                    ffn_dropout=0.1,\n                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',\n                                     'ffn', 'norm'))),\n            map_decoder=dict(\n                type='MapDetectionTransformerDecoder',\n                num_layers=3,\n                return_intermediate=True,\n                transformerlayers=dict(\n                    type='DetrTransformerDecoderLayer',\n                    attn_cfgs=[\n                        dict(\n                            type='MultiheadAttention',\n                            embed_dims=256,\n                            num_heads=8,\n                            dropout=0.1),\n                        dict(\n                            type='CustomMSDeformableAttention',\n                            embed_dims=256,\n                            num_levels=1)\n                    ],\n                    feedforward_channels=512,\n                    ffn_dropout=0.1,\n                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',\n                                     'ffn', 'norm')))),\n        bbox_coder=dict(\n            type='CustomNMSFreeCoder',\n            post_center_range=[-20, -35, -10.0, 20, 35, 10.0],\n            pc_range=[-15.0, -30.0, -2.0, 15.0, 30.0, 2.0],\n            max_num=100,\n            voxel_size=[0.15, 0.15, 4],\n            num_classes=10),\n        map_bbox_coder=dict(\n            type='MapNMSFreeCoder',\n            post_center_range=[-20, -35, -20, -35, 20, 35, 20, 35],\n            pc_range=[-15.0, -30.0, -2.0, 15.0, 30.0, 2.0],\n            max_num=50,\n            voxel_size=[0.15, 0.15, 4],\n            num_classes=3),\n        positional_encoding=dict(\n            type='LearnedPositionalEncoding',\n            num_feats=128,\n            row_num_embed=100,\n            col_num_embed=100),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=2.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=0.25),\n        loss_traj=dict(type='L1Loss', loss_weight=0.2),\n        loss_traj_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=0.2),\n        loss_iou=dict(type='GIoULoss', loss_weight=0.0),\n        loss_map_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=2.0),\n        loss_map_bbox=dict(type='L1Loss', loss_weight=0.0),\n        loss_map_iou=dict(type='GIoULoss', loss_weight=0.0),\n        loss_map_pts=dict(type='PtsL1Loss', loss_weight=1.0),\n        loss_map_dir=dict(type='PtsDirCosLoss', loss_weight=0.005),\n        loss_plan_reg=dict(type='L1Loss', loss_weight=1.0),\n        loss_plan_bound=dict(\n            type='PlanMapBoundLoss', loss_weight=1.0, dis_thresh=1.0),\n        loss_plan_col=dict(type='PlanCollisionLoss', loss_weight=1.0),\n        loss_plan_dir=dict(type='PlanMapDirectionLoss', loss_weight=0.5),\n        loss_vae_gen=dict(type='ProbabilisticLoss', loss_weight=1.0),\n        loss_diff_gen=dict(type='DiffusionLoss', loss_weight=0.5)),\n    train_cfg=dict(\n        pts=dict(\n            grid_size=[512, 512, 1],\n            voxel_size=[0.15, 0.15, 4],\n            point_cloud_range=[-15.0, -30.0, -2.0, 15.0, 30.0, 2.0],\n            out_size_factor=4,\n            assigner=dict(\n                type='HungarianAssigner3D',\n                cls_cost=dict(type='FocalLossCost', weight=2.0),\n                reg_cost=dict(type='BBox3DL1Cost', weight=0.25),\n                iou_cost=dict(type='IoUCost', weight=0.0),\n                pc_range=[-15.0, -30.0, -2.0, 15.0, 30.0, 2.0]),\n            map_assigner=dict(\n                type='MapHungarianAssigner3D',\n                cls_cost=dict(type='FocalLossCost', weight=2.0),\n                reg_cost=dict(\n                    type='BBoxL1Cost', weight=0.0, box_format='xywh'),\n                iou_cost=dict(type='IoUCost', iou_mode='giou', weight=0.0),\n                pts_cost=dict(type='OrderedPtsL1Cost', weight=1.0),\n                pc_range=[-15.0, -30.0, -2.0, 15.0, 30.0, 2.0]))))\noptimizer = dict(\n    type='AdamW',\n    lr=0.0002,\n    paramwise_cfg=dict(custom_keys=dict(img_backbone=dict(lr_mult=0.1))),\n    weight_decay=0.01)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='CosineAnnealing',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.3333333333333333,\n    min_lr_ratio=0.001)\nrunner = dict(type='EpochBasedRunner', max_epochs=60)\nfind_unused_parameters = True\ncustom_hooks = [dict(type='CustomSetEpochInfoHook')]\ngpu_ids = range(0, 1)\n", "seed": 0, "exp_name": "GenAD_config.py"}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 9e-05, "memory": 5346, "data_time": 0.06165, "loss_cls": 1.36597, "loss_bbox": 1.58914, "loss_traj": 1.28446, "loss_traj_cls": 0.13885, "loss_map_cls": 1.00071, "loss_map_bbox": 0.0, "loss_map_iou": 0.0, "loss_map_pts": 4.72285, "loss_map_dir": 0.07876, "loss_plan_reg": 0.31487, "loss_plan_bound": 0.0, "loss_plan_col": 0.0, "loss_plan_dir": 0.0, "d0.loss_cls": 1.40759, "d0.loss_bbox": 1.60108, "d1.loss_cls": 1.36857, "d1.loss_bbox": 1.58987, "d0.loss_map_cls": 1.00563, "d0.loss_map_bbox": 0.0, "d0.loss_map_iou": 0.0, "d0.loss_map_pts": 4.97229, "d0.loss_map_dir": 0.07637, "d1.loss_map_cls": 1.00924, "d1.loss_map_bbox": 0.0, "d1.loss_map_iou": 0.0, "d1.loss_map_pts": 4.75349, "d1.loss_map_dir": 0.07825, "loss_vae_gen": 0.01132, "loss": 28.3693, "grad_norm": 39.11304, "time": 0.63034}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00012, "memory": 5346, "data_time": 0.01509, "loss_cls": 1.2514, "loss_bbox": 1.41705, "loss_traj": 1.00767, "loss_traj_cls": 0.13585, "loss_map_cls": 0.88903, "loss_map_bbox": 0.0, "loss_map_iou": 0.0, "loss_map_pts": 2.94426, "loss_map_dir": 0.06898, "loss_plan_reg": 0.28586, "loss_plan_bound": 0.0, "loss_plan_col": 0.0, "loss_plan_dir": 0.0, "d0.loss_cls": 1.23524, "d0.loss_bbox": 1.43757, "d1.loss_cls": 1.25158, "d1.loss_bbox": 1.42362, "d0.loss_map_cls": 0.85337, "d0.loss_map_bbox": 0.0, "d0.loss_map_iou": 0.0, "d0.loss_map_pts": 2.9028, "d0.loss_map_dir": 0.06837, "d1.loss_map_cls": 0.88646, "d1.loss_map_bbox": 0.0, "d1.loss_map_iou": 0.0, "d1.loss_map_pts": 2.92204, "d1.loss_map_dir": 0.06858, "loss_vae_gen": 0.0009, "loss": 21.05064, "grad_norm": 41.15342, "time": 0.57665}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00015, "memory": 5346, "data_time": 0.01525, "loss_cls": 1.17151, "loss_bbox": 1.46237, "loss_traj": 0.79486, "loss_traj_cls": 0.12557, "loss_map_cls": 0.83329, "loss_map_bbox": 0.0, "loss_map_iou": 0.0, "loss_map_pts": 2.58079, "loss_map_dir": 0.07104, "loss_plan_reg": 0.28206, "loss_plan_bound": 0.0, "loss_plan_col": 0.0, "loss_plan_dir": 0.0, "d0.loss_cls": 1.16063, "d0.loss_bbox": 1.43151, "d1.loss_cls": 1.16744, "d1.loss_bbox": 1.43947, "d0.loss_map_cls": 0.79083, "d0.loss_map_bbox": 0.0, "d0.loss_map_iou": 0.0, "d0.loss_map_pts": 2.57308, "d0.loss_map_dir": 0.07022, "d1.loss_map_cls": 0.82433, "d1.loss_map_bbox": 0.0, "d1.loss_map_iou": 0.0, "d1.loss_map_pts": 2.57582, "d1.loss_map_dir": 0.07097, "loss_vae_gen": 0.00117, "loss": 19.42697, "grad_norm": 35.97112, "time": 0.57533}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00017, "memory": 5346, "data_time": 0.01508, "loss_cls": 1.1345, "loss_bbox": 1.38082, "loss_traj": 0.78389, "loss_traj_cls": 0.12538, "loss_map_cls": 0.87267, "loss_map_bbox": 0.0, "loss_map_iou": 0.0, "loss_map_pts": 2.63493, "loss_map_dir": 0.06911, "loss_plan_reg": 0.28257, "loss_plan_bound": 0.0, "loss_plan_col": 0.0, "loss_plan_dir": 0.0, "d0.loss_cls": 1.13506, "d0.loss_bbox": 1.34375, "d1.loss_cls": 1.15233, "d1.loss_bbox": 1.35377, "d0.loss_map_cls": 0.80199, "d0.loss_map_bbox": 0.0, "d0.loss_map_iou": 0.0, "d0.loss_map_pts": 2.61014, "d0.loss_map_dir": 0.06847, "d1.loss_map_cls": 0.84147, "d1.loss_map_bbox": 0.0, "d1.loss_map_iou": 0.0, "d1.loss_map_pts": 2.62463, "d1.loss_map_dir": 0.0691, "loss_vae_gen": 0.00177, "loss": 19.28633, "grad_norm": 40.088, "time": 0.56832}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.0002, "memory": 5346, "data_time": 0.01511, "loss_cls": 1.14412, "loss_bbox": 1.3556, "loss_traj": 0.66313, "loss_traj_cls": 0.12103, "loss_map_cls": 0.86846, "loss_map_bbox": 0.0, "loss_map_iou": 0.0, "loss_map_pts": 2.47389, "loss_map_dir": 0.06658, "loss_plan_reg": 0.26548, "loss_plan_bound": 0.0, "loss_plan_col": 0.0, "loss_plan_dir": 0.0, "d0.loss_cls": 1.13468, "d0.loss_bbox": 1.34076, "d1.loss_cls": 1.14266, "d1.loss_bbox": 1.33231, "d0.loss_map_cls": 0.81398, "d0.loss_map_bbox": 0.0, "d0.loss_map_iou": 0.0, "d0.loss_map_pts": 2.44525, "d0.loss_map_dir": 0.06579, "d1.loss_map_cls": 0.83812, "d1.loss_map_bbox": 0.0, "d1.loss_map_iou": 0.0, "d1.loss_map_pts": 2.4616, "d1.loss_map_dir": 0.06607, "loss_vae_gen": 0.00048, "loss": 18.59997, "grad_norm": 41.50223, "time": 0.56914}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.0002, "memory": 5346, "data_time": 0.0149, "loss_cls": 1.17419, "loss_bbox": 1.34488, "loss_traj": 0.56868, "loss_traj_cls": 0.1243, "loss_map_cls": 0.84055, "loss_map_bbox": 0.0, "loss_map_iou": 0.0, "loss_map_pts": 2.36452, "loss_map_dir": 0.0615, "loss_plan_reg": 0.24695, "loss_plan_bound": 0.0, "loss_plan_col": 0.0, "loss_plan_dir": 0.0, "d0.loss_cls": 1.13028, "d0.loss_bbox": 1.29815, "d1.loss_cls": 1.15234, "d1.loss_bbox": 1.27755, "d0.loss_map_cls": 0.77674, "d0.loss_map_bbox": 0.0, "d0.loss_map_iou": 0.0, "d0.loss_map_pts": 2.30716, "d0.loss_map_dir": 0.05986, "d1.loss_map_cls": 0.80453, "d1.loss_map_bbox": 0.0, "d1.loss_map_iou": 0.0, "d1.loss_map_pts": 2.31454, "d1.loss_map_dir": 0.06005, "loss_vae_gen": 0.00021, "loss": 17.90695, "grad_norm": 41.38965, "time": 0.58346}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.0002, "memory": 5346, "data_time": 0.01493, "loss_cls": 1.10626, "loss_bbox": 1.27038, "loss_traj": 0.74375, "loss_traj_cls": 0.12458, "loss_map_cls": 0.82045, "loss_map_bbox": 0.0, "loss_map_iou": 0.0, "loss_map_pts": 2.2401, "loss_map_dir": 0.0598, "loss_plan_reg": 0.2543, "loss_plan_bound": 0.0, "loss_plan_col": 0.0, "loss_plan_dir": 0.0, "d0.loss_cls": 1.08941, "d0.loss_bbox": 1.31204, "d1.loss_cls": 1.09495, "d1.loss_bbox": 1.28693, "d0.loss_map_cls": 0.78798, "d0.loss_map_bbox": 0.0, "d0.loss_map_iou": 0.0, "d0.loss_map_pts": 2.23459, "d0.loss_map_dir": 0.05854, "d1.loss_map_cls": 0.80538, "d1.loss_map_bbox": 0.0, "d1.loss_map_iou": 0.0, "d1.loss_map_pts": 2.23098, "d1.loss_map_dir": 0.05948, "loss_vae_gen": 0.00024, "loss": 17.58015, "grad_norm": 50.71001, "time": 0.58097}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.0002, "memory": 5346, "data_time": 0.01498, "loss_cls": 1.10944, "loss_bbox": 1.2873, "loss_traj": 0.70684, "loss_traj_cls": 0.12282, "loss_map_cls": 0.80893, "loss_map_bbox": 0.0, "loss_map_iou": 0.0, "loss_map_pts": 2.17903, "loss_map_dir": 0.05359, "loss_plan_reg": 0.29443, "loss_plan_bound": 0.0, "loss_plan_col": 0.0, "loss_plan_dir": 0.0, "d0.loss_cls": 1.10582, "d0.loss_bbox": 1.28358, "d1.loss_cls": 1.09462, "d1.loss_bbox": 1.25938, "d0.loss_map_cls": 0.77866, "d0.loss_map_bbox": 0.0, "d0.loss_map_iou": 0.0, "d0.loss_map_pts": 2.17031, "d0.loss_map_dir": 0.05275, "d1.loss_map_cls": 0.79575, "d1.loss_map_bbox": 0.0, "d1.loss_map_iou": 0.0, "d1.loss_map_pts": 2.17222, "d1.loss_map_dir": 0.0534, "loss_vae_gen": 0.00051, "loss": 17.3294, "grad_norm": 45.78396, "time": 0.57632}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.0002, "memory": 5347, "data_time": 0.01499, "loss_cls": 1.10099, "loss_bbox": 1.19423, "loss_traj": 0.73059, "loss_traj_cls": 0.1284, "loss_map_cls": 0.8092, "loss_map_bbox": 0.0, "loss_map_iou": 0.0, "loss_map_pts": 2.1748, "loss_map_dir": 0.05571, "loss_plan_reg": 0.20853, "loss_plan_bound": 0.0, "loss_plan_col": 0.0, "loss_plan_dir": 0.0, "d0.loss_cls": 1.08658, "d0.loss_bbox": 1.19523, "d1.loss_cls": 1.08469, "d1.loss_bbox": 1.21313, "d0.loss_map_cls": 0.78265, "d0.loss_map_bbox": 0.0, "d0.loss_map_iou": 0.0, "d0.loss_map_pts": 2.16168, "d0.loss_map_dir": 0.05467, "d1.loss_map_cls": 0.79188, "d1.loss_map_bbox": 0.0, "d1.loss_map_iou": 0.0, "d1.loss_map_pts": 2.17047, "d1.loss_map_dir": 0.05523, "loss_vae_gen": 0.00014, "loss": 16.99881, "grad_norm": 44.66694, "time": 0.58349}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.0002, "memory": 5347, "data_time": 0.01554, "loss_cls": 1.05833, "loss_bbox": 1.21166, "loss_traj": 0.63875, "loss_traj_cls": 0.11645, "loss_map_cls": 0.80556, "loss_map_bbox": 0.0, "loss_map_iou": 0.0, "loss_map_pts": 2.063, "loss_map_dir": 0.04886, "loss_plan_reg": 0.24866, "loss_plan_bound": 0.0, "loss_plan_col": 0.0, "loss_plan_dir": 0.0, "d0.loss_cls": 1.02359, "d0.loss_bbox": 1.22056, "d1.loss_cls": 1.03711, "d1.loss_bbox": 1.21695, "d0.loss_map_cls": 0.77309, "d0.loss_map_bbox": 0.0, "d0.loss_map_iou": 0.0, "d0.loss_map_pts": 2.05684, "d0.loss_map_dir": 0.04766, "d1.loss_map_cls": 0.79223, "d1.loss_map_bbox": 0.0, "d1.loss_map_iou": 0.0, "d1.loss_map_pts": 2.05636, "d1.loss_map_dir": 0.04826, "loss_vae_gen": 0.0001, "loss": 16.46402, "grad_norm": 39.26202, "time": 0.58685}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.0002, "memory": 5347, "data_time": 0.01538, "loss_cls": 1.0698, "loss_bbox": 1.19339, "loss_traj": 0.84761, "loss_traj_cls": 0.12317, "loss_map_cls": 0.80297, "loss_map_bbox": 0.0, "loss_map_iou": 0.0, "loss_map_pts": 2.09567, "loss_map_dir": 0.05086, "loss_plan_reg": 0.29488, "loss_plan_bound": 0.0, "loss_plan_col": 0.0, "loss_plan_dir": 0.0, "d0.loss_cls": 1.03694, "d0.loss_bbox": 1.21437, "d1.loss_cls": 1.05324, "d1.loss_bbox": 1.19104, "d0.loss_map_cls": 0.77146, "d0.loss_map_bbox": 0.0, "d0.loss_map_iou": 0.0, "d0.loss_map_pts": 2.09277, "d0.loss_map_dir": 0.05047, "d1.loss_map_cls": 0.78563, "d1.loss_map_bbox": 0.0, "d1.loss_map_iou": 0.0, "d1.loss_map_pts": 2.09432, "d1.loss_map_dir": 0.05068, "loss_vae_gen": 0.00012, "loss": 16.8194, "grad_norm": 45.8058, "time": 0.58751}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.0002, "memory": 5347, "data_time": 0.01578, "loss_cls": 1.03631, "loss_bbox": 1.18645, "loss_traj": 0.63995, "loss_traj_cls": 0.11879, "loss_map_cls": 0.78016, "loss_map_bbox": 0.0, "loss_map_iou": 0.0, "loss_map_pts": 1.98504, "loss_map_dir": 0.04893, "loss_plan_reg": 0.25469, "loss_plan_bound": 0.0, "loss_plan_col": 0.0, "loss_plan_dir": 0.0, "d0.loss_cls": 0.98833, "d0.loss_bbox": 1.19615, "d1.loss_cls": 0.99827, "d1.loss_bbox": 1.2207, "d0.loss_map_cls": 0.75626, "d0.loss_map_bbox": 0.0, "d0.loss_map_iou": 0.0, "d0.loss_map_pts": 1.98355, "d0.loss_map_dir": 0.04827, "d1.loss_map_cls": 0.76772, "d1.loss_map_bbox": 0.0, "d1.loss_map_iou": 0.0, "d1.loss_map_pts": 1.98272, "d1.loss_map_dir": 0.04865, "loss_vae_gen": 0.00024, "loss": 16.0412, "grad_norm": 41.42906, "time": 0.57965}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.0002, "memory": 5347, "data_time": 0.01476, "loss_cls": 1.05558, "loss_bbox": 1.22469, "loss_traj": 0.54195, "loss_traj_cls": 0.11705, "loss_map_cls": 0.77569, "loss_map_bbox": 0.0, "loss_map_iou": 0.0, "loss_map_pts": 1.9976, "loss_map_dir": 0.04837, "loss_plan_reg": 0.26679, "loss_plan_bound": 0.0, "loss_plan_col": 0.0, "loss_plan_dir": 0.0, "d0.loss_cls": 1.0338, "d0.loss_bbox": 1.21045, "d1.loss_cls": 1.04114, "d1.loss_bbox": 1.20265, "d0.loss_map_cls": 0.7579, "d0.loss_map_bbox": 0.0, "d0.loss_map_iou": 0.0, "d0.loss_map_pts": 1.98965, "d0.loss_map_dir": 0.04783, "d1.loss_map_cls": 0.76747, "d1.loss_map_bbox": 0.0, "d1.loss_map_iou": 0.0, "d1.loss_map_pts": 1.99198, "d1.loss_map_dir": 0.04823, "loss_vae_gen": 0.00015, "loss": 16.11896, "grad_norm": 42.47068, "time": 0.57569}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.0002, "memory": 5347, "data_time": 0.01489, "loss_cls": 1.07885, "loss_bbox": 1.21853, "loss_traj": 0.61941, "loss_traj_cls": 0.12217, "loss_map_cls": 0.7703, "loss_map_bbox": 0.0, "loss_map_iou": 0.0, "loss_map_pts": 2.01627, "loss_map_dir": 0.04567, "loss_plan_reg": 0.2508, "loss_plan_bound": 0.0, "loss_plan_col": 0.0, "loss_plan_dir": 0.0, "d0.loss_cls": 1.04609, "d0.loss_bbox": 1.21404, "d1.loss_cls": 1.05696, "d1.loss_bbox": 1.19798, "d0.loss_map_cls": 0.76033, "d0.loss_map_bbox": 0.0, "d0.loss_map_iou": 0.0, "d0.loss_map_pts": 2.01148, "d0.loss_map_dir": 0.04498, "d1.loss_map_cls": 0.76267, "d1.loss_map_bbox": 0.0, "d1.loss_map_iou": 0.0, "d1.loss_map_pts": 2.01834, "d1.loss_map_dir": 0.04533, "loss_vae_gen": 0.00017, "loss": 16.28038, "grad_norm": 44.48477, "time": 0.57513}
